import { Transform } from "./transform.js";

export class Grid
{
    constructor(height, width, distance)
    {
        this.h = height;
        this.w = width;
        this.d = distance;

        let Array2D = (r,c) => [...Array(r)].map(_=>Array(c).fill(0));
        this.gridArr1 = Array2D(height, width);
        this.gridArr2 = Array2D(height, width);
        this.gridArr3 = Array2D(height, width);
        this.gridMap = [];
    }

    create()
    {
        this.gridArr1 = 
        [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
         [1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1],
         [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
         [1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1],
         [1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1],
         [1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1],
         [1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1],
         [1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1],
         [1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1],
         [1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1],
         [1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1],
         [1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
         [1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1],
         [1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1],
         [1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1],
         [1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1],
         [1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];

        this.gridArr2 = 
        [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1],
         [1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1],
         [1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1],
         [1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1],
         [1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1],
         [1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0,1],
         [1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1],
         [1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1],
         [1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1],
         [1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1],
         [1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1],
         [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];

        this.gridArr3 = 
        [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
         [1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1],
         [1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1],
         [1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1],
         [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
         [1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1],
         [1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1],
         [1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1],
         [1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1],
         [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1],
         [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];

        this.gridMap.push(this.gridArr1);
        this.gridMap.push(this.gridArr2);
        this.gridMap.push(this.gridArr3);
    }

    fetchGrid(index)
    {
        return this.gridMap[index];
    }

    rotateGrid(eventkey)
    {
        var trans = this.gridArr[0].map((col, i) => this.gridArr.map(row => row[i]));
        var rotate = this.gridArr;

        if(eventkey == "[")
        {
            for(let i=0;i<trans.length;i++)
            {
                for(let j=0;j<trans[0].length;j++)
                {
                    rotate[i][j] = trans[i][19-j];
                }
            }
        }
        else if(eventkey == "]")
        {
            for(let i=0;i<trans.length;i++)
            {
                for(let j=0;j<trans[0].length;j++)
                {
                    rotate[i][j] = trans[19-i][j];
                }
            }
        }
        return rotate;
    }
}